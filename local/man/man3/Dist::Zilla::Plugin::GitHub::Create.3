.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::GitHub::Create 3"
.TH Dist::Zilla::Plugin::GitHub::Create 3 "2013-12-03" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::GitHub::Create \- Create a new GitHub repo on dzil new
.SH "VERSION"
.IX Header "VERSION"
version 0.36
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Configure git with your GitHub credentials:
.PP
.Vb 2
\&    $ git config \-\-global github.user LoginName
\&    $ git config \-\-global github.password GitHubPassword
.Ve
.PP
Alternatively you can install Config::Identity and write your credentials
in the (optionally GPG-encrypted) \f(CW\*(C`~/.github\*(C'\fR file as follows:
.PP
.Vb 2
\&    login LoginName
\&    password GitHubpassword
.Ve
.PP
(if only the login name is set, the password will be asked interactively)
.PP
then, in your \fIprofile.ini\fR:
.PP
.Vb 2
\&    # default config
\&    [GitHub::Create]
\&
\&    # to override publicness
\&    [GitHub::Create]
\&    public = 0
\&
\&    # use a template for the repository name
\&    [GitHub::Create]
\&    repo = {{ lc $dist \-> name }}
.Ve
.PP
See \*(L"\s-1ATTRIBUTES\s0\*(R" for more options.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Dist::Zilla plugin creates a new git repository on GitHub.com when
a new distribution is created with \f(CW\*(C`dzil new\*(C'\fR.
.PP
It will also add a new git remote pointing to the newly created GitHub
repository's private \s-1URL\s0. See \*(L"\s-1ADDING\s0 \s-1REMOTE\s0\*(R" for more info.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .IP """repo""" 4
.el .IP "\f(CWrepo\fR" 4
.IX Item "repo"
Specifies the name of the GitHub repository to be created (by default the name
of the dist is used). This can be a template, so something like the following
will work:
.Sp
.Vb 1
\&    repo = {{ lc $dist \-> name }}
.Ve
.ie n .IP """prompt""" 4
.el .IP "\f(CWprompt\fR" 4
.IX Item "prompt"
Prompt for confirmation before creating a GitHub repository if this option is
set to true (default is false).
.ie n .IP """public""" 4
.el .IP "\f(CWpublic\fR" 4
.IX Item "public"
Create a public repository if this option is set to true (default), otherwise
create a private repository.
.ie n .IP """remote""" 4
.el .IP "\f(CWremote\fR" 4
.IX Item "remote"
Specifies the git remote name to be added (default 'origin'). This will point to
the newly created GitHub repository's private \s-1URL\s0. See \*(L"\s-1ADDING\s0 \s-1REMOTE\s0\*(R" for
more info.
.ie n .IP """has_issues""" 4
.el .IP "\f(CWhas_issues\fR" 4
.IX Item "has_issues"
Enable issues for the new repository if this option is set to true (default).
.ie n .IP """has_wiki""" 4
.el .IP "\f(CWhas_wiki\fR" 4
.IX Item "has_wiki"
Enable the wiki for the new repository if this option is set to true (default).
.ie n .IP """has_downloads""" 4
.el .IP "\f(CWhas_downloads\fR" 4
.IX Item "has_downloads"
Enable downloads for the new repository if this option is set to true (default).
.SH "ADDING REMOTE"
.IX Header "ADDING REMOTE"
By default \f(CW\*(C`GitHub::Create\*(C'\fR adds a new git remote pointing to the newly created
GitHub repository's private \s-1URL\s0 \fBif, and only if,\fR a git repository has already
been initialized, and if the remote doesn't already exist in that repository.
.PP
To take full advantage of this feature you should use, along with \f(CW\*(C`GitHub::Create\*(C'\fR,
the Dist::Zilla::Plugin::Git::Init plugin, leaving blank its \f(CW\*(C`remote\*(C'\fR option,
as follows:
.PP
.Vb 4
\&    [Git::Init]
\&    ; here goes your Git::Init config, remember
\&    ; to not set the \*(Aqremote\*(Aq option
\&    [GitHub::Create]
.Ve
.PP
You may set your preferred remote name, by setting the \f(CW\*(C`remote\*(C'\fR option of the
\&\f(CW\*(C`GitHub::Create\*(C'\fR plugin, as follows:
.PP
.Vb 3
\&    [Git::Init]
\&    [GitHub::Create]
\&    remote = myremote
.Ve
.PP
Remember to put \f(CW\*(C`[Git::Init]\*(C'\fR \fBbefore\fR \f(CW\*(C`[GitHub::Create]\*(C'\fR.
.PP
After the new remote is added, the current branch will track it, unless remote
tracking for the branch was already set. This may allow one to use the
Dist::Zilla::Plugin::Git::Push plugin without the need to do a \f(CW\*(C`git push\*(C'\fR
between the \f(CW\*(C`dzil new\*(C'\fR and \f(CW\*(C`dzil release\*(C'\fR. Note though that this will work
only when the \f(CW\*(C`push.default\*(C'\fR Git configuration option is set to either
\&\f(CW\*(C`upstream\*(C'\fR or \f(CW\*(C`simple\*(C'\fR (which will be the default in Git 2.0). If you are
using an older Git or don't want to change your config, you may want to have a
look at Dist::Zilla::Plugin::Git::PushInitial.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alessandro Ghedini <alexbio@cpan.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2011 Alessandro Ghedini.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
